
import java_cup.runtime.*;
	
/* Terminals (tokens returned by the scanner). */
terminal			 NM,QM, LP,ID,EM, RP, CL, DT, II, COMA,WF,WITHSOME,WITHALL,LCURLY,RCURLY,ANDENTAIL,ORENTAIL,ARROW,AND,OR,DOUBLEIMPLICATION,NOT,ANDOR,NEXISTS,THRESH,ALL;

/* Non-terminals */
nonterminal	String		condH,  entailment, terminalPunctuation,SNePSLOGsymbol,qvar,symbolSequence,withSomeTerm,withAllTerm,termSet,prefixedTerm,termSequence,negatedTerm,andorTerm,nexistsTerm,threshTerm,atomicTerm,termSetSequence,wff,nexistsParamters,helpersConnectives,infixedTerm,allTerm,termSetH,atomicTermH;



/* The grammar */

wff ::=  infixedTerm:e1 {:RESULT=e1;:} | entailment:e{:RESULT=e;:} |prefixedTerm:p{:RESULT=p;:};





infixedTerm ::= prefixedTerm:p1 helpersConnectives:h1 prefixedTerm:p2 {:RESULT=p1+" "+h1+" "+p2;:} | prefixedTerm:p3 helpersConnectives:h2 infixedTerm:i2 {:RESULT=p3+" "+h2+" "+i2;:};
 
helpersConnectives ::= AND{:RESULT="and";:} | OR{:RESULT="or";:}| DOUBLEIMPLICATION{:RESULT="<=>";:};


entailment ::= termSet:t1 ARROW termSet:t2 {:RESULT=t1+ "ARROW "+t2;:}|termSet:t3 ORENTAIL termSet:t4 {:RESULT=t3+" ORENTAIL "+t4;:}  | termSet:t5 ANDENTAIL termSet:t6 {:RESULT=t5+" ANDENTAIL "+t6;:} | termSet:t7 II termSet:t8 {:RESULT=t7+" numerical entail "+t8;:};	





termSet ::= prefixedTerm:p{:RESULT="termSet"+p;:} | RCURLY termSequence:t LCURLY {:RESULT="{"+t+"}";:};
termSequence ::= prefixedTerm:p{:RESULT="prefixed term:"+p;:}|prefixedTerm:p1 termSequence:s{:RESULT="prefixed term "+p1+" and prefixed term "+s;:};



prefixedTerm ::= negatedTerm:n{:RESULT="negated term: "+n;:} | andorTerm:a{:RESULT="andor term: "+a;:} | allTerm:l{:RESULT="forAll term: "+l;:} | nexistsTerm:x{:RESULT="nExist term: "+x;:}
| threshTerm:h{:RESULT="forAll term: "+h;:} | atomicTerm:i{:RESULT="forAll term: "+i;:};


allTerm ::= ALL LP symbolSequence:s	RP LP wff:w RP {:RESULT=s+" "+w;:};

negatedTerm ::= NOT atomicTerm:a{:RESULT="not "+a;:};

andorTerm ::= ANDOR LP NM:i COMA NM:j RP termSet:t{:Integer x = Integer.parseInt(i+"");Integer y=Integer.parseInt(j+"");if(x>=0 && y>=x){RESULT="andorTerm Right";}else{RESULT="wrong andor term";}:};


threshTerm ::= THRESH LP NM:i COMA NM:j RP termSet:t {:Integer x = Integer.parseInt(i+"");Integer y=Integer.parseInt(j+"");if(x>=0 && y>=x){RESULT="threshTerm Right";}else{RESULT="wrong threshTerm";}:}| THRESH LP NM:i1 RP termSet:t1 {:Integer x = Integer.parseInt(i1+"");if(x>=0){RESULT="threshTerm Right";}else{RESULT="wrong thresTerm";}:};

nexistsTerm ::= NEXISTS nexistsParamters:np LP symbolSequence:s RP LP termSet:t1 CL termSet:t2 RP{:RESULT="";:};

nexistsParamters ::= LP NM:i COMA NM:j COMA NM:k RP {:RESULT="("+i+","+j+","+k+")";:}|LP NM:j1 RP{:RESULT="("+j1+")";:}| LP NM:i1 COMA NM:k1 RP {:RESULT="("+i1+","+k1+")";:};





atomicTerm ::=  SNePSLOGsymbol:s atomicTermH:at {:RESULT=s+at;:}| qvar:q atomicTermH:qh{:RESULT=q+qh;:} | withSomeTerm:ws {:RESULT=ws;:}|withAllTerm:wa {:RESULT=wa;:}|LP wff:w RP{:RESULT="("+w+")";:};

atomicTermH ::= LP termSetSequence:t2 RP{:RESULT="("+t2+")";:};







withSomeTerm ::= WITHSOME LP symbolSequence:s COMA termSet:t1 COMA termSet:t2 RP {:RESULT="withSomeTerm "+s+"-"+t1+"-"+t2;:} | WITHSOME LP symbolSequence:s1 COMA termSet:t3 COMA termSet:t4 termSet:t5 RP {:RESULT="withSomeTerm "+s1+"-"+t3+"-"+t4+"-"+t5;:};


withAllTerm ::= WITHALL LP symbolSequence:s COMA termSet:t1 COMA termSet:t2 RP{:RESULT="withAllTerm "+s+"-"+t1+"-"+t2;:} | WITHALL LP symbolSequence:s1 COMA termSet:t3 COMA termSet:t4 termSet:t5 RP{:RESULT="withAllTerm "+s1+"-"+t3+"-"+t4+"-"+t5;:};




termSetSequence ::= termSet:t1 termSetH:t2 {:RESULT=t1+t2;:}|{:RESULT="";:};
termSetH ::= COMA termSet:ts {:RESULT=" and "+ts;:};



symbolSequence ::= SNePSLOGsymbol:s condH:c {:RESULT=s+" "+c;:};
condH ::= symbolSequence:s1{:RESULT=s1;:} | {:RESULT="";:};

qvar ::= QM SNePSLOGsymbol:s {:RESULT="query"+s;:};

SNePSLOGsymbol ::= WF NM:n{:RESULT="wff"+n;:};


 terminalPunctuation ::= DT {:RESULT="terminal punctuation in sneps.\n";:}| COMA {:RESULT="terminal punctuation in sneps.\n";:}|  error {:RESULT = "Not a grammatical sneps!\n";System.out.println("Not sneps!");:};















